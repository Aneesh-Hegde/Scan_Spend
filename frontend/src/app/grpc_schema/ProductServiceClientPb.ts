/**
 * @fileoverview gRPC-Web generated client stub for product
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.1
// source: product.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as product_pb from './product_pb'; // proto import: "product.proto"


export class ProductServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddProduct = new grpcWeb.MethodDescriptor(
    '/product.ProductService/AddProduct',
    grpcWeb.MethodType.UNARY,
    product_pb.AddProductRequest,
    product_pb.ProductResponse,
    (request: product_pb.AddProductRequest) => {
      return request.serializeBinary();
    },
    product_pb.ProductResponse.deserializeBinary
  );

  addProduct(
    request: product_pb.AddProductRequest,
    metadata?: grpcWeb.Metadata | null): Promise<product_pb.ProductResponse>;

  addProduct(
    request: product_pb.AddProductRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: product_pb.ProductResponse) => void): grpcWeb.ClientReadableStream<product_pb.ProductResponse>;

  addProduct(
    request: product_pb.AddProductRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: product_pb.ProductResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/product.ProductService/AddProduct',
        request,
        metadata || {},
        this.methodDescriptorAddProduct,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/product.ProductService/AddProduct',
    request,
    metadata || {},
    this.methodDescriptorAddProduct);
  }

  methodDescriptorUpdateProduct = new grpcWeb.MethodDescriptor(
    '/product.ProductService/UpdateProduct',
    grpcWeb.MethodType.UNARY,
    product_pb.UpdateProductRequest,
    product_pb.ProductResponse,
    (request: product_pb.UpdateProductRequest) => {
      return request.serializeBinary();
    },
    product_pb.ProductResponse.deserializeBinary
  );

  updateProduct(
    request: product_pb.UpdateProductRequest,
    metadata?: grpcWeb.Metadata | null): Promise<product_pb.ProductResponse>;

  updateProduct(
    request: product_pb.UpdateProductRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: product_pb.ProductResponse) => void): grpcWeb.ClientReadableStream<product_pb.ProductResponse>;

  updateProduct(
    request: product_pb.UpdateProductRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: product_pb.ProductResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/product.ProductService/UpdateProduct',
        request,
        metadata || {},
        this.methodDescriptorUpdateProduct,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/product.ProductService/UpdateProduct',
    request,
    metadata || {},
    this.methodDescriptorUpdateProduct);
  }

  methodDescriptorDeleteProduct = new grpcWeb.MethodDescriptor(
    '/product.ProductService/DeleteProduct',
    grpcWeb.MethodType.UNARY,
    product_pb.DeleteProductRequest,
    product_pb.ProductResponse,
    (request: product_pb.DeleteProductRequest) => {
      return request.serializeBinary();
    },
    product_pb.ProductResponse.deserializeBinary
  );

  deleteProduct(
    request: product_pb.DeleteProductRequest,
    metadata?: grpcWeb.Metadata | null): Promise<product_pb.ProductResponse>;

  deleteProduct(
    request: product_pb.DeleteProductRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: product_pb.ProductResponse) => void): grpcWeb.ClientReadableStream<product_pb.ProductResponse>;

  deleteProduct(
    request: product_pb.DeleteProductRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: product_pb.ProductResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/product.ProductService/DeleteProduct',
        request,
        metadata || {},
        this.methodDescriptorDeleteProduct,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/product.ProductService/DeleteProduct',
    request,
    metadata || {},
    this.methodDescriptorDeleteProduct);
  }

  methodDescriptorGetProductsByUser = new grpcWeb.MethodDescriptor(
    '/product.ProductService/GetProductsByUser',
    grpcWeb.MethodType.UNARY,
    product_pb.GetProductsByUserRequest,
    product_pb.ProductsList,
    (request: product_pb.GetProductsByUserRequest) => {
      return request.serializeBinary();
    },
    product_pb.ProductsList.deserializeBinary
  );

  getProductsByUser(
    request: product_pb.GetProductsByUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<product_pb.ProductsList>;

  getProductsByUser(
    request: product_pb.GetProductsByUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: product_pb.ProductsList) => void): grpcWeb.ClientReadableStream<product_pb.ProductsList>;

  getProductsByUser(
    request: product_pb.GetProductsByUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: product_pb.ProductsList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/product.ProductService/GetProductsByUser',
        request,
        metadata || {},
        this.methodDescriptorGetProductsByUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/product.ProductService/GetProductsByUser',
    request,
    metadata || {},
    this.methodDescriptorGetProductsByUser);
  }

}

