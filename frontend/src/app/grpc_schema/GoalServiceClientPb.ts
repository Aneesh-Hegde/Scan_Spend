/**
 * @fileoverview gRPC-Web generated client stub for goals
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: goal.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as goal_pb from './goal_pb'; // proto import: "goal.proto"


export class GoalServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetGoals = new grpcWeb.MethodDescriptor(
    '/goals.GoalService/GetGoals',
    grpcWeb.MethodType.UNARY,
    goal_pb.GetGoalRequest,
    goal_pb.GetGoalResponse,
    (request: goal_pb.GetGoalRequest) => {
      return request.serializeBinary();
    },
    goal_pb.GetGoalResponse.deserializeBinary
  );

  getGoals(
    request: goal_pb.GetGoalRequest,
    metadata?: grpcWeb.Metadata | null): Promise<goal_pb.GetGoalResponse>;

  getGoals(
    request: goal_pb.GetGoalRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: goal_pb.GetGoalResponse) => void): grpcWeb.ClientReadableStream<goal_pb.GetGoalResponse>;

  getGoals(
    request: goal_pb.GetGoalRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: goal_pb.GetGoalResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/goals.GoalService/GetGoals',
        request,
        metadata || {},
        this.methodDescriptorGetGoals,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/goals.GoalService/GetGoals',
    request,
    metadata || {},
    this.methodDescriptorGetGoals);
  }

  methodDescriptorCreateGoals = new grpcWeb.MethodDescriptor(
    '/goals.GoalService/CreateGoals',
    grpcWeb.MethodType.UNARY,
    goal_pb.CreateGoalRequest,
    goal_pb.CreateGoalResponse,
    (request: goal_pb.CreateGoalRequest) => {
      return request.serializeBinary();
    },
    goal_pb.CreateGoalResponse.deserializeBinary
  );

  createGoals(
    request: goal_pb.CreateGoalRequest,
    metadata?: grpcWeb.Metadata | null): Promise<goal_pb.CreateGoalResponse>;

  createGoals(
    request: goal_pb.CreateGoalRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: goal_pb.CreateGoalResponse) => void): grpcWeb.ClientReadableStream<goal_pb.CreateGoalResponse>;

  createGoals(
    request: goal_pb.CreateGoalRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: goal_pb.CreateGoalResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/goals.GoalService/CreateGoals',
        request,
        metadata || {},
        this.methodDescriptorCreateGoals,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/goals.GoalService/CreateGoals',
    request,
    metadata || {},
    this.methodDescriptorCreateGoals);
  }

  methodDescriptorUpdateGoals = new grpcWeb.MethodDescriptor(
    '/goals.GoalService/UpdateGoals',
    grpcWeb.MethodType.UNARY,
    goal_pb.UpdateGoalRequest,
    goal_pb.UpdateResponse,
    (request: goal_pb.UpdateGoalRequest) => {
      return request.serializeBinary();
    },
    goal_pb.UpdateResponse.deserializeBinary
  );

  updateGoals(
    request: goal_pb.UpdateGoalRequest,
    metadata?: grpcWeb.Metadata | null): Promise<goal_pb.UpdateResponse>;

  updateGoals(
    request: goal_pb.UpdateGoalRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: goal_pb.UpdateResponse) => void): grpcWeb.ClientReadableStream<goal_pb.UpdateResponse>;

  updateGoals(
    request: goal_pb.UpdateGoalRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: goal_pb.UpdateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/goals.GoalService/UpdateGoals',
        request,
        metadata || {},
        this.methodDescriptorUpdateGoals,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/goals.GoalService/UpdateGoals',
    request,
    metadata || {},
    this.methodDescriptorUpdateGoals);
  }

  methodDescriptorEditGoals = new grpcWeb.MethodDescriptor(
    '/goals.GoalService/EditGoals',
    grpcWeb.MethodType.UNARY,
    goal_pb.EditGoalRequest,
    goal_pb.EditResponse,
    (request: goal_pb.EditGoalRequest) => {
      return request.serializeBinary();
    },
    goal_pb.EditResponse.deserializeBinary
  );

  editGoals(
    request: goal_pb.EditGoalRequest,
    metadata?: grpcWeb.Metadata | null): Promise<goal_pb.EditResponse>;

  editGoals(
    request: goal_pb.EditGoalRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: goal_pb.EditResponse) => void): grpcWeb.ClientReadableStream<goal_pb.EditResponse>;

  editGoals(
    request: goal_pb.EditGoalRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: goal_pb.EditResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/goals.GoalService/EditGoals',
        request,
        metadata || {},
        this.methodDescriptorEditGoals,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/goals.GoalService/EditGoals',
    request,
    metadata || {},
    this.methodDescriptorEditGoals);
  }

  methodDescriptorDeleteGoals = new grpcWeb.MethodDescriptor(
    '/goals.GoalService/DeleteGoals',
    grpcWeb.MethodType.UNARY,
    goal_pb.DeleteGoalRequest,
    goal_pb.DeleteResponse,
    (request: goal_pb.DeleteGoalRequest) => {
      return request.serializeBinary();
    },
    goal_pb.DeleteResponse.deserializeBinary
  );

  deleteGoals(
    request: goal_pb.DeleteGoalRequest,
    metadata?: grpcWeb.Metadata | null): Promise<goal_pb.DeleteResponse>;

  deleteGoals(
    request: goal_pb.DeleteGoalRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: goal_pb.DeleteResponse) => void): grpcWeb.ClientReadableStream<goal_pb.DeleteResponse>;

  deleteGoals(
    request: goal_pb.DeleteGoalRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: goal_pb.DeleteResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/goals.GoalService/DeleteGoals',
        request,
        metadata || {},
        this.methodDescriptorDeleteGoals,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/goals.GoalService/DeleteGoals',
    request,
    metadata || {},
    this.methodDescriptorDeleteGoals);
  }

  methodDescriptorGetGoalTransactions = new grpcWeb.MethodDescriptor(
    '/goals.GoalService/GetGoalTransactions',
    grpcWeb.MethodType.UNARY,
    goal_pb.GetGoalTransactionsRequest,
    goal_pb.GetGoalTransactionsResponse,
    (request: goal_pb.GetGoalTransactionsRequest) => {
      return request.serializeBinary();
    },
    goal_pb.GetGoalTransactionsResponse.deserializeBinary
  );

  getGoalTransactions(
    request: goal_pb.GetGoalTransactionsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<goal_pb.GetGoalTransactionsResponse>;

  getGoalTransactions(
    request: goal_pb.GetGoalTransactionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: goal_pb.GetGoalTransactionsResponse) => void): grpcWeb.ClientReadableStream<goal_pb.GetGoalTransactionsResponse>;

  getGoalTransactions(
    request: goal_pb.GetGoalTransactionsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: goal_pb.GetGoalTransactionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/goals.GoalService/GetGoalTransactions',
        request,
        metadata || {},
        this.methodDescriptorGetGoalTransactions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/goals.GoalService/GetGoalTransactions',
    request,
    metadata || {},
    this.methodDescriptorGetGoalTransactions);
  }

}

