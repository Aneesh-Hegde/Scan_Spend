// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: grpc_schema/upload.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileProcessingService_Upload_FullMethodName = "/fileprocessing.FileProcessingService/Upload"
)

// FileProcessingServiceClient is the client API for FileProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileProcessingServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error)
}

type fileProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileProcessingServiceClient(cc grpc.ClientConnInterface) FileProcessingServiceClient {
	return &fileProcessingServiceClient{cc}
}

func (c *fileProcessingServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileProcessingService_ServiceDesc.Streams[0], FileProcessingService_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRequest, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProcessingService_UploadClient = grpc.ClientStreamingClient[UploadRequest, UploadResponse]

// FileProcessingServiceServer is the server API for FileProcessingService service.
// All implementations must embed UnimplementedFileProcessingServiceServer
// for forward compatibility.
type FileProcessingServiceServer interface {
	Upload(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error
	mustEmbedUnimplementedFileProcessingServiceServer()
}

// UnimplementedFileProcessingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileProcessingServiceServer struct{}

func (UnimplementedFileProcessingServiceServer) Upload(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileProcessingServiceServer) mustEmbedUnimplementedFileProcessingServiceServer() {}
func (UnimplementedFileProcessingServiceServer) testEmbeddedByValue()                               {}

// UnsafeFileProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileProcessingServiceServer will
// result in compilation errors.
type UnsafeFileProcessingServiceServer interface {
	mustEmbedUnimplementedFileProcessingServiceServer()
}

func RegisterFileProcessingServiceServer(s grpc.ServiceRegistrar, srv FileProcessingServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileProcessingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileProcessingService_ServiceDesc, srv)
}

func _FileProcessingService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileProcessingServiceServer).Upload(&grpc.GenericServerStream[UploadRequest, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileProcessingService_UploadServer = grpc.ClientStreamingServer[UploadRequest, UploadResponse]

// FileProcessingService_ServiceDesc is the grpc.ServiceDesc for FileProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileprocessing.FileProcessingService",
	HandlerType: (*FileProcessingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FileProcessingService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_schema/upload.proto",
}
