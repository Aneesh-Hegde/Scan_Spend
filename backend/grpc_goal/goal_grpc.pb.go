// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: goal.proto

package grpc_goal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoalService_GetGoals_FullMethodName            = "/goals.GoalService/GetGoals"
	GoalService_CreateGoals_FullMethodName         = "/goals.GoalService/CreateGoals"
	GoalService_UpdateGoals_FullMethodName         = "/goals.GoalService/UpdateGoals"
	GoalService_EditGoals_FullMethodName           = "/goals.GoalService/EditGoals"
	GoalService_DeleteGoals_FullMethodName         = "/goals.GoalService/DeleteGoals"
	GoalService_GetGoalTransactions_FullMethodName = "/goals.GoalService/GetGoalTransactions"
)

// GoalServiceClient is the client API for GoalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoalServiceClient interface {
	GetGoals(ctx context.Context, in *GetGoalRequest, opts ...grpc.CallOption) (*GetGoalResponse, error)
	CreateGoals(ctx context.Context, in *CreateGoalRequest, opts ...grpc.CallOption) (*CreateGoalResponse, error)
	UpdateGoals(ctx context.Context, in *UpdateGoalRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	EditGoals(ctx context.Context, in *EditGoalRequest, opts ...grpc.CallOption) (*EditResponse, error)
	DeleteGoals(ctx context.Context, in *DeleteGoalRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetGoalTransactions(ctx context.Context, in *GetGoalTransactionsRequest, opts ...grpc.CallOption) (*GetGoalTransactionsResponse, error)
}

type goalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoalServiceClient(cc grpc.ClientConnInterface) GoalServiceClient {
	return &goalServiceClient{cc}
}

func (c *goalServiceClient) GetGoals(ctx context.Context, in *GetGoalRequest, opts ...grpc.CallOption) (*GetGoalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoalResponse)
	err := c.cc.Invoke(ctx, GoalService_GetGoals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) CreateGoals(ctx context.Context, in *CreateGoalRequest, opts ...grpc.CallOption) (*CreateGoalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGoalResponse)
	err := c.cc.Invoke(ctx, GoalService_CreateGoals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) UpdateGoals(ctx context.Context, in *UpdateGoalRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, GoalService_UpdateGoals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) EditGoals(ctx context.Context, in *EditGoalRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditResponse)
	err := c.cc.Invoke(ctx, GoalService_EditGoals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) DeleteGoals(ctx context.Context, in *DeleteGoalRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, GoalService_DeleteGoals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) GetGoalTransactions(ctx context.Context, in *GetGoalTransactionsRequest, opts ...grpc.CallOption) (*GetGoalTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoalTransactionsResponse)
	err := c.cc.Invoke(ctx, GoalService_GetGoalTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoalServiceServer is the server API for GoalService service.
// All implementations must embed UnimplementedGoalServiceServer
// for forward compatibility.
type GoalServiceServer interface {
	GetGoals(context.Context, *GetGoalRequest) (*GetGoalResponse, error)
	CreateGoals(context.Context, *CreateGoalRequest) (*CreateGoalResponse, error)
	UpdateGoals(context.Context, *UpdateGoalRequest) (*UpdateResponse, error)
	EditGoals(context.Context, *EditGoalRequest) (*EditResponse, error)
	DeleteGoals(context.Context, *DeleteGoalRequest) (*DeleteResponse, error)
	GetGoalTransactions(context.Context, *GetGoalTransactionsRequest) (*GetGoalTransactionsResponse, error)
	mustEmbedUnimplementedGoalServiceServer()
}

// UnimplementedGoalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoalServiceServer struct{}

func (UnimplementedGoalServiceServer) GetGoals(context.Context, *GetGoalRequest) (*GetGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoals not implemented")
}
func (UnimplementedGoalServiceServer) CreateGoals(context.Context, *CreateGoalRequest) (*CreateGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoals not implemented")
}
func (UnimplementedGoalServiceServer) UpdateGoals(context.Context, *UpdateGoalRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoals not implemented")
}
func (UnimplementedGoalServiceServer) EditGoals(context.Context, *EditGoalRequest) (*EditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGoals not implemented")
}
func (UnimplementedGoalServiceServer) DeleteGoals(context.Context, *DeleteGoalRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoals not implemented")
}
func (UnimplementedGoalServiceServer) GetGoalTransactions(context.Context, *GetGoalTransactionsRequest) (*GetGoalTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoalTransactions not implemented")
}
func (UnimplementedGoalServiceServer) mustEmbedUnimplementedGoalServiceServer() {}
func (UnimplementedGoalServiceServer) testEmbeddedByValue()                     {}

// UnsafeGoalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoalServiceServer will
// result in compilation errors.
type UnsafeGoalServiceServer interface {
	mustEmbedUnimplementedGoalServiceServer()
}

func RegisterGoalServiceServer(s grpc.ServiceRegistrar, srv GoalServiceServer) {
	// If the following call pancis, it indicates UnimplementedGoalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoalService_ServiceDesc, srv)
}

func _GoalService_GetGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).GetGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_GetGoals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).GetGoals(ctx, req.(*GetGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_CreateGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).CreateGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_CreateGoals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).CreateGoals(ctx, req.(*CreateGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_UpdateGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).UpdateGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_UpdateGoals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).UpdateGoals(ctx, req.(*UpdateGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_EditGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).EditGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_EditGoals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).EditGoals(ctx, req.(*EditGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_DeleteGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).DeleteGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_DeleteGoals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).DeleteGoals(ctx, req.(*DeleteGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_GetGoalTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoalTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).GetGoalTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_GetGoalTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).GetGoalTransactions(ctx, req.(*GetGoalTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoalService_ServiceDesc is the grpc.ServiceDesc for GoalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goals.GoalService",
	HandlerType: (*GoalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoals",
			Handler:    _GoalService_GetGoals_Handler,
		},
		{
			MethodName: "CreateGoals",
			Handler:    _GoalService_CreateGoals_Handler,
		},
		{
			MethodName: "UpdateGoals",
			Handler:    _GoalService_UpdateGoals_Handler,
		},
		{
			MethodName: "EditGoals",
			Handler:    _GoalService_EditGoals_Handler,
		},
		{
			MethodName: "DeleteGoals",
			Handler:    _GoalService_DeleteGoals_Handler,
		},
		{
			MethodName: "GetGoalTransactions",
			Handler:    _GoalService_GetGoalTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goal.proto",
}
